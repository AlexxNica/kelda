// Code generated by protoc-gen-go.
// source: minion.proto
// DO NOT EDIT!

/*
Package minion is a generated protocol buffer package.

It is generated from these files:
	minion.proto

It has these top-level messages:
	BootRequest
	BootReply
*/
package minion

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BootRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Role string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (m *BootRequest) Reset()         { *m = BootRequest{} }
func (m *BootRequest) String() string { return proto.CompactTextString(m) }
func (*BootRequest) ProtoMessage()    {}

type BootReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *BootReply) Reset()         { *m = BootReply{} }
func (m *BootReply) String() string { return proto.CompactTextString(m) }
func (*BootReply) ProtoMessage()    {}

func init() {
	proto.RegisterType((*BootRequest)(nil), "BootRequest")
	proto.RegisterType((*BootReply)(nil), "BootReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for DiMinion service

type DiMinionClient interface {
	Boot(ctx context.Context, in *BootRequest, opts ...grpc.CallOption) (*BootReply, error)
}

type diMinionClient struct {
	cc *grpc.ClientConn
}

func NewDiMinionClient(cc *grpc.ClientConn) DiMinionClient {
	return &diMinionClient{cc}
}

func (c *diMinionClient) Boot(ctx context.Context, in *BootRequest, opts ...grpc.CallOption) (*BootReply, error) {
	out := new(BootReply)
	err := grpc.Invoke(ctx, "/.DiMinion/Boot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiMinion service

type DiMinionServer interface {
	Boot(context.Context, *BootRequest) (*BootReply, error)
}

func RegisterDiMinionServer(s *grpc.Server, srv DiMinionServer) {
	s.RegisterService(&_DiMinion_serviceDesc, srv)
}

func _DiMinion_Boot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DiMinionServer).Boot(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _DiMinion_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".DiMinion",
	HandlerType: (*DiMinionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Boot",
			Handler:    _DiMinion_Boot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
