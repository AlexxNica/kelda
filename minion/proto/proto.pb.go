// Code generated by protoc-gen-go.
// source: proto.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	MinionConfig
	ContainerConfig
	Reply
	Request
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MinionConfig_Role int32

const (
	MinionConfig_NONE   MinionConfig_Role = 0
	MinionConfig_MASTER MinionConfig_Role = 1
	MinionConfig_WORKER MinionConfig_Role = 2
)

var MinionConfig_Role_name = map[int32]string{
	0: "NONE",
	1: "MASTER",
	2: "WORKER",
}
var MinionConfig_Role_value = map[string]int32{
	"NONE":   0,
	"MASTER": 1,
	"WORKER": 2,
}

func (x MinionConfig_Role) String() string {
	return proto1.EnumName(MinionConfig_Role_name, int32(x))
}
func (MinionConfig_Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type MinionConfig struct {
	ID        string            `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Role      MinionConfig_Role `protobuf:"varint,2,opt,name=role,enum=MinionConfig_Role" json:"role,omitempty"`
	PrivateIP string            `protobuf:"bytes,3,opt,name=PrivateIP" json:"PrivateIP,omitempty"`
	EtcdToken string            `protobuf:"bytes,4,opt,name=EtcdToken" json:"EtcdToken,omitempty"`
}

func (m *MinionConfig) Reset()                    { *m = MinionConfig{} }
func (m *MinionConfig) String() string            { return proto1.CompactTextString(m) }
func (*MinionConfig) ProtoMessage()               {}
func (*MinionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ContainerConfig struct {
	Count map[string]int32 `protobuf:"bytes,1,rep,name=Count" json:"Count,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ContainerConfig) Reset()                    { *m = ContainerConfig{} }
func (m *ContainerConfig) String() string            { return proto1.CompactTextString(m) }
func (*ContainerConfig) ProtoMessage()               {}
func (*ContainerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ContainerConfig) GetCount() map[string]int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type Reply struct {
	Success bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto1.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Request struct {
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto1.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto1.RegisterType((*MinionConfig)(nil), "MinionConfig")
	proto1.RegisterType((*ContainerConfig)(nil), "ContainerConfig")
	proto1.RegisterType((*Reply)(nil), "Reply")
	proto1.RegisterType((*Request)(nil), "Request")
	proto1.RegisterEnum("MinionConfig_Role", MinionConfig_Role_name, MinionConfig_Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Minion service

type MinionClient interface {
	SetMinionConfig(ctx context.Context, in *MinionConfig, opts ...grpc.CallOption) (*Reply, error)
	GetMinionConfig(ctx context.Context, in *Request, opts ...grpc.CallOption) (*MinionConfig, error)
	SetContainerConfig(ctx context.Context, in *ContainerConfig, opts ...grpc.CallOption) (*Reply, error)
}

type minionClient struct {
	cc *grpc.ClientConn
}

func NewMinionClient(cc *grpc.ClientConn) MinionClient {
	return &minionClient{cc}
}

func (c *minionClient) SetMinionConfig(ctx context.Context, in *MinionConfig, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/Minion/SetMinionConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) GetMinionConfig(ctx context.Context, in *Request, opts ...grpc.CallOption) (*MinionConfig, error) {
	out := new(MinionConfig)
	err := grpc.Invoke(ctx, "/Minion/GetMinionConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) SetContainerConfig(ctx context.Context, in *ContainerConfig, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/Minion/SetContainerConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Minion service

type MinionServer interface {
	SetMinionConfig(context.Context, *MinionConfig) (*Reply, error)
	GetMinionConfig(context.Context, *Request) (*MinionConfig, error)
	SetContainerConfig(context.Context, *ContainerConfig) (*Reply, error)
}

func RegisterMinionServer(s *grpc.Server, srv MinionServer) {
	s.RegisterService(&_Minion_serviceDesc, srv)
}

func _Minion_SetMinionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MinionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MinionServer).SetMinionConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Minion_GetMinionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MinionServer).GetMinionConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Minion_SetContainerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ContainerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MinionServer).SetContainerConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Minion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Minion",
	HandlerType: (*MinionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMinionConfig",
			Handler:    _Minion_SetMinionConfig_Handler,
		},
		{
			MethodName: "GetMinionConfig",
			Handler:    _Minion_GetMinionConfig_Handler,
		},
		{
			MethodName: "SetContainerConfig",
			Handler:    _Minion_SetContainerConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x91, 0x5f, 0x4b, 0xf3, 0x30,
	0x14, 0xc6, 0x97, 0xae, 0xdd, 0xd6, 0xb3, 0x77, 0x6f, 0x67, 0xae, 0xca, 0xbc, 0x19, 0xb9, 0x71,
	0xc8, 0x08, 0x32, 0x6f, 0xc4, 0x3b, 0x99, 0x45, 0x86, 0xec, 0x0f, 0xdd, 0xc0, 0xeb, 0x5a, 0xa3,
	0x94, 0x96, 0x64, 0xa6, 0xe9, 0xa0, 0xdf, 0xc1, 0x4b, 0x3f, 0xb0, 0x69, 0x2c, 0xcc, 0xf6, 0xa6,
	0x24, 0xe7, 0xfc, 0xce, 0xd3, 0xe7, 0x3c, 0x81, 0xe1, 0x51, 0x0a, 0x25, 0xa8, 0xf9, 0x92, 0x2f,
	0x04, 0xff, 0xd6, 0x09, 0x4f, 0x04, 0x5f, 0x0a, 0xfe, 0x9e, 0x7c, 0x60, 0x00, 0x6b, 0xf5, 0xe8,
	0xa3, 0x29, 0x9a, 0xb9, 0x78, 0x0a, 0xb6, 0x14, 0x19, 0xf3, 0x2d, 0x7d, 0xfb, 0xbf, 0xc0, 0xf4,
	0x2f, 0x48, 0x43, 0xdd, 0xc1, 0x17, 0xe0, 0xee, 0x64, 0x72, 0x8a, 0x14, 0x5b, 0xed, 0xfc, 0xae,
	0x19, 0xd2, 0xa5, 0x40, 0xc5, 0x6f, 0x07, 0x91, 0x32, 0xee, 0xdb, 0x55, 0x89, 0xcc, 0xc0, 0x36,
	0xf4, 0x00, 0xec, 0xcd, 0x76, 0x13, 0x8c, 0x3b, 0xfa, 0x2f, 0xbd, 0xf5, 0xc3, 0xfe, 0x10, 0x84,
	0x63, 0x54, 0x9d, 0x5f, 0xb6, 0xe1, 0xb3, 0x3e, 0x5b, 0x24, 0x05, 0x4f, 0xcb, 0xab, 0x28, 0xe1,
	0x4c, 0xd6, 0x86, 0xae, 0xc1, 0x59, 0x8a, 0x82, 0x2b, 0xed, 0xa9, 0x3b, 0x1b, 0x2e, 0x2e, 0x69,
	0x0b, 0xa0, 0xa6, 0x1b, 0x70, 0x25, 0xcb, 0xc9, 0x1c, 0xe0, 0x7c, 0xc3, 0x43, 0xe8, 0xa6, 0xac,
	0xac, 0x77, 0x19, 0x81, 0x73, 0x8a, 0xb2, 0xe2, 0x77, 0x19, 0xe7, 0xde, 0xba, 0x43, 0xe4, 0x0a,
	0x9c, 0x90, 0x1d, 0xb3, 0x12, 0x7b, 0xd0, 0xdf, 0x17, 0x71, 0xcc, 0xf2, 0xdc, 0xc0, 0x83, 0x0a,
	0x0e, 0xa4, 0x14, 0xd2, 0xc0, 0x2e, 0x71, 0xa1, 0x1f, 0xb2, 0xcf, 0x82, 0xe5, 0x6a, 0xf1, 0x8d,
	0xb4, 0x73, 0x13, 0x83, 0x36, 0xe6, 0xed, 0x99, 0x6a, 0x84, 0x37, 0x6a, 0x44, 0x34, 0xe9, 0x51,
	0xa3, 0x4f, 0x3a, 0x78, 0x0e, 0xde, 0x53, 0x8b, 0x1d, 0xd0, 0x5a, 0x73, 0xd2, 0x9c, 0xd2, 0xf4,
	0x0d, 0x60, 0xad, 0xdc, 0x0e, 0x62, 0xdc, 0xde, 0xfc, 0xac, 0xff, 0xda, 0x33, 0xaf, 0x79, 0xfb,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xd4, 0x62, 0x1c, 0xdc, 0x01, 0x00, 0x00,
}
