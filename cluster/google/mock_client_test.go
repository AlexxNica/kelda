package google

import compute "google.golang.org/api/compute/v1"
import mock "github.com/stretchr/testify/mock"

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

// DeleteFirewall provides a mock function with given fields: project, firewall
func (_m *mockClient) DeleteFirewall(project string, firewall string) (*compute.Operation, error) {
	ret := _m.Called(project, firewall)

	var r0 *compute.Operation
	if rf, ok := ret.Get(0).(func(string, string) *compute.Operation); ok {
		r0 = rf(project, firewall)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, firewall)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstance provides a mock function with given fields: project, zone, operation
func (_m *mockClient) DeleteInstance(project string, zone string, operation string) (*compute.Operation, error) {
	ret := _m.Called(project, zone, operation)

	var r0 *compute.Operation
	if rf, ok := ret.Get(0).(func(string, string, string) *compute.Operation); ok {
		r0 = rf(project, zone, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(project, zone, operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalOperation provides a mock function with given fields: project, operation
func (_m *mockClient) GetGlobalOperation(project string, operation string) (*compute.Operation, error) {
	ret := _m.Called(project, operation)

	var r0 *compute.Operation
	if rf, ok := ret.Get(0).(func(string, string) *compute.Operation); ok {
		r0 = rf(project, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZoneOperation provides a mock function with given fields: project, zone, operation
func (_m *mockClient) GetZoneOperation(project string, zone string, operation string) (*compute.Operation, error) {
	ret := _m.Called(project, zone, operation)

	var r0 *compute.Operation
	if rf, ok := ret.Get(0).(func(string, string, string) *compute.Operation); ok {
		r0 = rf(project, zone, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(project, zone, operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertFirewall provides a mock function with given fields: project, firewall
func (_m *mockClient) InsertFirewall(project string, firewall *compute.Firewall) (*compute.Operation, error) {
	ret := _m.Called(project, firewall)

	var r0 *compute.Operation
	if rf, ok := ret.Get(0).(func(string, *compute.Firewall) *compute.Operation); ok {
		r0 = rf(project, firewall)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *compute.Firewall) error); ok {
		r1 = rf(project, firewall)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertInstance provides a mock function with given fields: project, zone, instance
func (_m *mockClient) InsertInstance(project string, zone string, instance *compute.Instance) (*compute.Operation, error) {
	ret := _m.Called(project, zone, instance)

	var r0 *compute.Operation
	if rf, ok := ret.Get(0).(func(string, string, *compute.Instance) *compute.Operation); ok {
		r0 = rf(project, zone, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *compute.Instance) error); ok {
		r1 = rf(project, zone, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNetwork provides a mock function with given fields: project, network
func (_m *mockClient) InsertNetwork(project string, network *compute.Network) (*compute.Operation, error) {
	ret := _m.Called(project, network)

	var r0 *compute.Operation
	if rf, ok := ret.Get(0).(func(string, *compute.Network) *compute.Operation); ok {
		r0 = rf(project, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *compute.Network) error); ok {
		r1 = rf(project, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFirewalls provides a mock function with given fields: project
func (_m *mockClient) ListFirewalls(project string) (*compute.FirewallList, error) {
	ret := _m.Called(project)

	var r0 *compute.FirewallList
	if rf, ok := ret.Get(0).(func(string) *compute.FirewallList); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.FirewallList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: project, zone, opts
func (_m *mockClient) ListInstances(project string, zone string, opts apiOptions) (*compute.InstanceList, error) {
	ret := _m.Called(project, zone, opts)

	var r0 *compute.InstanceList
	if rf, ok := ret.Get(0).(func(string, string, apiOptions) *compute.InstanceList); ok {
		r0 = rf(project, zone, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.InstanceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, apiOptions) error); ok {
		r1 = rf(project, zone, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworks provides a mock function with given fields: project
func (_m *mockClient) ListNetworks(project string) (*compute.NetworkList, error) {
	ret := _m.Called(project)

	var r0 *compute.NetworkList
	if rf, ok := ret.Get(0).(func(string) *compute.NetworkList); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.NetworkList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchFirewall provides a mock function with given fields: project, name, firewall
func (_m *mockClient) PatchFirewall(project string, name string, firewall *compute.Firewall) (*compute.Operation, error) {
	ret := _m.Called(project, name, firewall)

	var r0 *compute.Operation
	if rf, ok := ret.Get(0).(func(string, string, *compute.Firewall) *compute.Operation); ok {
		r0 = rf(project, name, firewall)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *compute.Firewall) error); ok {
		r1 = rf(project, name, firewall)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ client = (*mockClient)(nil)
