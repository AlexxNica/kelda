#!/usr/bin/env python

### Developed on python3

from bs4 import BeautifulSoup
import urllib.request
import os
import json
from collections import OrderedDict
import re
# from IPython import embed

class GCEParser(object):
    gceURL = "https://cloud.google.com/compute/pricing"
    goPackage = 'constants'

    machineType = 'Machine type'
    ignoredTypes = ['Custom machine type']
    price = 'Price (USD)'
    ram = 'Memory'
    cpu = 'Virtual CPUs'

    def __init__(self):
        self.embedcount = 0

    def parseGCE(self):
        response = urllib.request.urlretrieve(self.gceURL)
        tmpfile = response[0]
        f = open(tmpfile, 'r')
        soup = BeautifulSoup(f.read(), "html.parser")
        f.close()
        os.remove(tmpfile)

        data = []
        tables = soup.find_all('table')
        for t in tables:
            res = self.parseTable(t)
            if res:
                data += res

        self.cleanData(data)
        return self.getJSON(data)


    def getJSON(self, data):
        json_data = {}
        json_data['Descriptions'] = []
        for row in data:
            json_data['Descriptions'].append(self.emitLine(row))
        toPrint = json.dumps(json_data, indent = 2)
        return json_data

    # Returns the line
    def emitLine(self, row):
        line = OrderedDict()
        line['Size'] = row[self.machineType]
        line['CPU'] = int(row[self.cpu])
        line['RAM'] = float(row[self.ram].split('GB')[0])
        line['Price'] = float(re.findall("\d+\.\d+", row[self.price])[0])
        return line

    def cleanData(self, data):
        for row in data:
            row[self.price] = row[self.price].strip("$")
            row[self.ram] = row[self.ram].strip("GB")

    def parseTable(self, table):
        data = []
        try:
            header = table.find('thead').find('tr').find_all('th')
            header = [x.text.strip() for x in header]
        except AttributeError:
            return
        table_body = table.find('tbody')
        rows = table_body.find_all('tr')
        for row in rows:
            cols = row.find_all('td')
            temp = []
            for x in cols:
                for attr in x.attrs:
                    if attr == 'default':
                        temp.append(x[attr])
                        break
                    elif attr == 'ore-hourly' and len(re.findall("\d+\.\d+", x[attr])) != 0:
                        temp.append(x[attr])
                        break
                else:
                    temp.append(x.text.replace('\n', ''))
            cols = [x.strip() for x in temp if x]
            rowDict = {}
            for i in range(len(header)):
                if i >= len(cols):
                    continue
                rowDict[header[i]] = cols[i]
            if rowDict:
                if (self.machineType not in rowDict or
                    rowDict[self.machineType] in self.ignoredTypes):
                    continue
                data.append(rowDict)
        return data
    

def main():
    with open('blueprint/googleDescriptions.json', 'w') as outfile:
        gce = GCEParser()
        google_descriptions = gce.parseGCE()
        json.dump(google_descriptions, outfile, indent = 2)

if __name__ == "__main__":
    main()
